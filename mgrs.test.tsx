import { decode, get100kSetForZone, getEastingFromChar, getLetter100kID, getLetterDesignator, getMinNorthing, getNorthingFromChar, LLtoMGRS, LLtoUTM, mgrsToLLBounds, mgrsToPoint, UTMtoLL } from "./mgrs"

describe('the MGRS helper util', () => {
  it("has error handling and sufficient test coverage", () => { 
    expect(LLtoUTM({ lat: 10, lon: 180 }).zoneNumber).toBe(60)
    expect(LLtoUTM({ lat: 60, lon: 6 }).zoneNumber).toBe(32)
    expect(LLtoUTM({ lat: 74, lon: 6 }).zoneNumber).toBe(31)
    expect(LLtoUTM({ lat: 74, lon: 9 }).zoneNumber).toBe(33)
    expect(LLtoUTM({ lat: 74, lon: 21 }).zoneNumber).toBe(35)
    expect(LLtoUTM({ lat: 74, lon: 33 }).zoneNumber).toBe(37)
    expect(LLtoUTM({ lat: 74, lon: 49 }).zoneNumber).toBe(39)
    expect(LLtoUTM({ lat: -74, lon: 33 }).northing).toBe(1787961)
    expect(UTMtoLL({ easting: 10000, northing: 10000, zoneNumber: 33, zoneLetter: "P" })).toMatchObject({ "lat": 0.0902047933132418, "lon": 10.600846144401519 })
    expect(() => UTMtoLL({ easting: 10000, northing: 10000, zoneNumber: 63, zoneLetter: "P" })).toThrowError("invalid zone number")
    expect(UTMtoLL({ easting: 10000, northing: 10000, zoneNumber: 33, zoneLetter: "A" })).toStrictEqual({ "lat": 241578241.64826587, "lon": -10093190415.913406 })
    expect(getLetterDesignator(83)).toBe('X')
    expect(getLetterDesignator(70)).toBe('W')
    expect(getLetterDesignator(60)).toBe('V')
    expect(getLetterDesignator(50)).toBe('U')
    expect(getLetterDesignator(40)).toBe('T')
    expect(getLetterDesignator(30)).toBe('R')
    expect(getLetterDesignator(20)).toBe('Q')
    expect(getLetterDesignator(10)).toBe('P')
    expect(getLetterDesignator(0)).toBe('N')
    expect(getLetterDesignator(-10)).toBe('L')
    expect(getLetterDesignator(-20)).toBe('K')
    expect(getLetterDesignator(-700)).toBe('Z')
    expect(getLetterDesignator(700)).toBe('Z')
    expect(get100kSetForZone(6))
    expect(mgrsToLLBounds('32PPS0960005578')[1]).toBeCloseTo(10)
    expect(mgrsToPoint('32PPS0960005578')[1]).toBeCloseTo(10)
    expect(() => mgrsToPoint('')).toThrowError('toPoint received a blank string')
    expect(LLtoMGRS([10, 10])).toBe('32P PS 09600 05578')
    expect(() => LLtoMGRS([181, 10])).toThrowError('forward received an invalid longitude of 181')
    expect(() => LLtoMGRS([10, 181])).toThrowError('forward received an invalid latitude of 181')
    expect(() => LLtoMGRS([10, 85])).toThrowError('forward received a latitude of 85, but this library does not support conversions of points in polar regions below 80°S and above 84°N')
    // Lord forgive me for I have sinned. this is an array of all possible MGRS 100KID's. procedurally generated. 18*60*8 items
    var codes = []
    var index = 0
    for (var j = 1; j <= 8; j++) for (var k = 0; k <= 19; k++) for (var i = 1; i <= 60; i++) codes.push(getLetter100kID(j, k, i))
    for (var j = 1; j <= 8; j++) for (var k = 0; k <= 19; k++) for (var i = 1; i <= 60; i++) {
      index++
      expect(getLetter100kID(j, k, i)).toBe(codes[(index - 1)])
    }

    expect(() => decode("")).toThrowError("MGRSPoint bad conversion")
    expect(() => decode("33PP")).toThrowError("MGRSPoint bad length")
    expect(() => decode("33PPS056")).toThrowError("MGRSPoint has to have an even number")
    expect(() => decode("33APS")).toThrowError("MGRSPoint zone letter A not handled")
    expect(() => decode("33BPS")).toThrowError("MGRSPoint zone letter B not handled")
    expect(() => decode("33YPS")).toThrowError("MGRSPoint zone letter Y not handled")
    expect(() => decode("33IPS")).toThrowError("MGRSPoint zone letter I not handled")
    expect(() => decode("33ZPS")).toThrowError("MGRSPoint zone letter Z not handled")
    expect(() => decode("33OPS")).toThrowError("MGRSPoint zone letter O not handled")
    expect(() => getEastingFromChar("_", 2)).toThrowError('Bad character: _')
    expect(() => getNorthingFromChar("_", 2)).toThrowError('MGRSPoint given invalid Northing _')
    expect(() => getNorthingFromChar(" ", 2)).toThrowError('Bad character')
    expect(getMinNorthing("C")).toBe(1100000)
    expect(getMinNorthing("D")).toBe(2000000)
    expect(getMinNorthing("E")).toBe(2800000)
    expect(getMinNorthing("F")).toBe(3700000)
    expect(getMinNorthing("G")).toBe(4600000)
    expect(getMinNorthing("H")).toBe(5500000)
    expect(() => getMinNorthing("I")).toThrowError("Invalid zone")
    expect(getMinNorthing("J")).toBe(6400000)
    expect(getMinNorthing("K")).toBe(7300000)
    expect(getMinNorthing("L")).toBe(8200000)
    expect(getMinNorthing("M")).toBe(9100000)
    expect(getMinNorthing("N")).toBe(0)
    expect(getMinNorthing("P")).toBe(800000)
    expect(getMinNorthing("Q")).toBe(1700000)
    expect(getMinNorthing("R")).toBe(2600000)
    expect(getMinNorthing("S")).toBe(3500000)
    expect(getMinNorthing("T")).toBe(4400000)
    expect(getMinNorthing("U")).toBe(5300000)
    expect(getMinNorthing("V")).toBe(6200000)
    expect(getMinNorthing("W")).toBe(7000000)
    expect(getMinNorthing("X")).toBe(7900000)
  })
})